diff -ur linux-4.18-patched/drivers/mmc/host/lowrisc_sd.c ../lowrisc-chip-refresh-v0.6/riscv-linux/drivers/mmc/host/lowrisc_sd.c
--- linux-4.18-patched/drivers/mmc/host/lowrisc_sd.c	2018-09-21 10:58:44.790947783 +0100
+++ ../lowrisc-chip-refresh-v0.6/riscv-linux/drivers/mmc/host/lowrisc_sd.c	2018-10-01 14:57:41.752038444 +0100
@@ -33,6 +33,150 @@
 #define LOG(l) printk l
 #define LOGV(l) pr_debug l
 
+static volatile uint64_t *led_sd_base;
+static uint32_t led_last;
+
+#ifdef CONFIG_LOWRISC_GPIO
+#include <asm/uaccess.h>
+#include <linux/cdev.h>
+#define GPIO_MAJOR  200
+#define GPIO_MINOR  0
+#define GPIO_DEV_COUNT 2
+
+static int     gpio_open( struct inode *, struct file * );
+static ssize_t gpio_read( struct file * ,        char *  , size_t, loff_t *);
+static ssize_t gpio_write(struct file * , const  char *  , size_t, loff_t *);
+static int     gpio_close(struct inode *, struct file * );
+struct file_operations gpio_fops = {
+        read    :       gpio_read,
+        write   :       gpio_write,
+        open    :       gpio_open,
+        release :       gpio_close,
+        owner   :       THIS_MODULE
+};
+
+struct cdev gpio_cdev;
+
+int gpio_init_module(void)
+{
+
+	dev_t devno;
+	unsigned int count = GPIO_DEV_COUNT; // apply for two minor for two LED
+	int err;
+
+	devno = MKDEV(GPIO_MAJOR, GPIO_MINOR);
+	register_chrdev_region(devno, count , "myLED");
+
+	// -- initial the char device 
+	cdev_init(&gpio_cdev, &gpio_fops);
+	gpio_cdev.owner = THIS_MODULE;
+	err = cdev_add(&gpio_cdev, devno, count);
+
+	if (err < 0)
+	{
+		printk("Device Add Error\n");
+		return -1;
+	}
+
+	printk("This is lowrisc-gpio driver.\n");
+
+        return 0;
+}
+
+void gpio_cleanup_module(void)
+{
+	dev_t devno;
+
+	devno = MKDEV(GPIO_MAJOR, GPIO_MINOR);
+
+	unregister_chrdev_region(devno, GPIO_DEV_COUNT);
+	cdev_del(&gpio_cdev);
+}
+
+/*
+ * file operation: OPEN 
+ * */
+static int gpio_open(struct inode *inod, struct file *fil)
+{
+    return 0;
+}
+
+/*
+ * file operation: READ
+ * */
+static ssize_t gpio_read(struct file *filp, char *buff, size_t len, loff_t *off)
+{
+  static const char hex[] = "0123456789ABCDEF";
+  
+	int led_value = 0;
+	short count;
+        char msg[5];
+
+        if (*off)
+          return 0;
+        
+        if (led_sd_base)
+          led_value = led_sd_base[from_dip];
+        
+        msg[0] = hex[(led_value >> 12)&0xF];
+        msg[1] = hex[(led_value >> 8)&0xF];
+        msg[2] = hex[(led_value >> 4)&0xF];
+        msg[3] = hex[(led_value >> 0)&0xF];
+
+        if (len > 4)
+          len = 4;
+
+	count = raw_copy_to_user(buff, msg, len);
+
+	return len;
+}
+
+/*
+ * file operation: WRITE
+ * */
+static ssize_t gpio_write(struct file *filp, const char *buff, size_t len, loff_t *off)
+{
+	short count;
+        char *endp, msg[7];
+
+        if (*off)
+          return 0;
+        
+        if (len > 6)
+          len = 6;
+	count = raw_copy_from_user( msg, buff, len );
+        msg[len] = 0;
+        
+        if (led_sd_base)
+          {
+            led_last = (led_last&red_led) | (simple_strtol(msg, &endp, 16) & ~red_led);
+            printk("User msg %s, led=%X", msg, led_last);
+            led_sd_base[led_reg] = led_last;
+          }
+	return len;
+}
+
+/*
+ * file operation : CLOSE
+ * */
+static int gpio_close(struct inode *inod, struct file *fil)
+{
+	return 0;
+}
+#endif
+
+static void lowrisc_sd_set_led(struct lowrisc_sd_host *host, unsigned char state)
+{
+  volatile uint64_t *sd_base = host->ioaddr;
+  if (!led_sd_base)
+    led_sd_base = sd_base;
+  if (state)
+    led_last |= red_led;
+  else
+    led_last &= ~red_led;
+  led_sd_base[led_reg] = led_last;
+}
+
 void sd_align(struct lowrisc_sd_host *host, int d_align)
 {
   volatile uint64_t *sd_base = host->ioaddr;
@@ -134,12 +278,6 @@
 	}
 }
 
-static void lowrisc_sd_set_led(struct lowrisc_sd_host *host, unsigned char state)
-{
-  volatile uint64_t *sd_base = host->ioaddr;
-  sd_base[led_reg] = state;
-}
-
 static void lowrisc_sd_finish_request(struct lowrisc_sd_host *host)
 {
 	struct mmc_request *mrq = host->mrq;
@@ -579,7 +717,11 @@
 		ret = -EBUSY;
 		goto release;
 	}
-
+        
+        led_sd_base = host->ioaddr;
+#ifdef CONFIG_LOWRISC_GPIO
+        gpio_init_module();
+#endif
 	host->ioaddr = ioremap(iomem->start, resource_size(iomem));
 	if (!host->ioaddr) {
 		ret = -ENOMEM;
diff -ur linux-4.18-patched/drivers/mmc/host/lowrisc_sd.h ../lowrisc-chip-refresh-v0.6/riscv-linux/drivers/mmc/host/lowrisc_sd.h
--- linux-4.18-patched/drivers/mmc/host/lowrisc_sd.h	2018-09-21 10:58:44.790947783 +0100
+++ ../lowrisc-chip-refresh-v0.6/riscv-linux/drivers/mmc/host/lowrisc_sd.h	2018-10-01 14:57:41.752038444 +0100
@@ -25,12 +25,15 @@
       detect_resp,xfr_addr_resp,irq_stat_resp,pll_resp,
       align_resp,clk_din_resp,arg_resp,cmd_i_resp,
       setting_resp,start_resp,reset_resp,blkcnt_resp,
-      blksize_resp,timeout_resp,clk_pll_resp,irq_en_resp};
+      blksize_resp,timeout_resp,clk_pll_resp,irq_en_resp,
+      dead1,dead2,dead3,from_dip};
 
 enum {SD_APP_OP_COND=41, data_buffer_offset=0x2000};
 
 enum {SD_CARD_RESP_END=1,SD_CARD_RW_END=2, SD_CARD_CARD_REMOVED_0=4, SD_CARD_CARD_INSERTED_0=8};
 
+enum {red_led = 1 << 21};
+
 struct lowrisc_sd_host {
   struct platform_device *pdev;
   struct mmc_host *mmc;
diff -ur linux-4.18-patched/drivers/char/Kconfig ../lowrisc-chip-refresh-v0.6/riscv-linux/drivers/char/Kconfig
--- linux-4.18-patched/drivers/char/Kconfig	2018-08-12 21:41:04.000000000 +0100
+++ ../lowrisc-chip-refresh-v0.6/riscv-linux/drivers/char/Kconfig	2018-10-01 14:57:41.748038533 +0100
@@ -448,6 +448,12 @@
 	  pc8736x_gpio drivers.  If those drivers are built as
 	  modules, this one will be too, named nsc_gpio
 
+config LOWRISC_GPIO
+	tristate "LowRISC Nexys4DDR GPIO Support"
+	depends on RISCV
+	help
+	  Support access to LEDs / switches on Nexys4DDR under LowRISC
+
 config RAW_DRIVER
 	tristate "RAW driver (/dev/raw/rawN)"
 	depends on BLOCK
